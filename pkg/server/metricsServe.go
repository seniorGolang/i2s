package server

import (
	"context"
	"os"
	"path"

	. "github.com/dave/jennifer/jen"

	"github.com/seniorGolang/i2s/pkg/meta"
)

func renderMetricsServe(info *meta.GenerationInfo) (err error) {

	srcFile := NewFileProxy("server")

	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	ctx := prepareContext(info)
	ctx = context.WithValue(ctx, "code", srcFile)

	srcFile.ImportName(packageRsCors, "cors")
	srcFile.ImportName(packageGorillaMux, "mux")
	srcFile.ImportName(packagePrometeusHandler, "promhttp")
	srcFile.ImportName(packageKitServer, "server")

	srcFile.Add(metricsServe())
	srcFile.Line().Add(accessControlFunc())

	srcFile.Line().Add(appServeMetrics(info))

	filePath := path.Join(info.OutputFilePath, "transport", "server")

	if err = os.MkdirAll(filePath, os.ModePerm); err != nil {
		return
	}
	return srcFile.Save(path.Join(filePath, "metrics.go"))
}

func metricsServe() (code *Statement) {

	return Func().Id("newMetricsHandler").Params().Qual(packagePathHttp, "Handler").BlockFunc(func(g *Group) {

		g.Line()
		g.Id("mux").Op(":=").Qual(packageGorillaMux, "NewRouter").Call()
		g.Line()

		g.Id("mux").Op(".").Id("Methods").Call(Id("\"GET\"")).Op(".").Id("Path").Call(Lit("/")).Op(".").Id("Handler").Call(Qual(packagePrometeusHandler, "Handler").Call())
		g.Id("mux").Op(".").Id("Methods").Call(Id("\"GET\"")).Op(".").Id("Path").Call(Lit("/metrics")).Op(".").Id("Handler").Call(Qual(packagePrometeusHandler, "Handler").Call())
		g.Return(Id("accessControl").Call(Id("mux")))
	})
}

func accessControlFunc() (code *Statement) {

	return Func().Id("accessControl").Params(Id("next").Qual(packagePathHttp, "Handler")).Qual(packagePathHttp, "Handler").
		BlockFunc(func(g *Group) {

			g.Line()
			g.Id("rules").Op(":=").Qual(packageRsCors, "New").Call(Qual(packageRsCors, "Options").ValuesFunc(func(g *Group) {

				g.Line().Add(DictFunc(func(d Dict) {
					d[Id("AllowCredentials")] = True()
					d[Id("AllowedOrigins")] = Op("[]").Id("string").Values(Lit("*"))
					d[Id("AllowedHeaders")] = Op("[]").Id("string").Values(Lit("*"))
					d[Id("AllowedMethods")] = Op("[]").Id("string").Values(Lit("GET"), Lit("POST"), Lit("PUT"), Lit("PATCH"), Lit("DELETE"), Lit("OPTIONS"), Lit("HEAD"))
				}))
			}))
			g.Return(Id("rules").Op(".").Id("Handler").Call(Id("next")))
		})
}
