package server

import (
	"context"
	"fmt"
	"os"
	"path"
	"strings"

	. "github.com/dave/jennifer/jen"

	"github.com/seniorGolang/i2s/pkg/meta"
	"github.com/seniorGolang/i2s/pkg/utils"
)

func renderServerJsonRPC(info *meta.GenerationInfo) (err error) {

	srcFile := NewFileProxy("server")

	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	transportPackagePath = path.Join(info.OutputPackageImport, info.ServiceName)

	srcFile.ImportName(packageGorillaMux, "mux")
	srcFile.ImportName(packageTrace, "trace")
	srcFile.ImportName(packagePathPackageUtils, "utils")
	srcFile.ImportName(transportPackagePath, strings.ToLower(info.ServiceName))
	srcFile.ImportName(packagePathPackageJsonRPC, "jsonrpc")
	srcFile.ImportName(packageKitServer, "server")

	for _, iface := range info.Services {
		service := utils.ToLowerCamel(iface.Name)
		transportPackagePath = path.Join(info.OutputPackageImport, service)
		srcFile.ImportName(transportPackagePath, service)
	}

	ctx := prepareContext(info)
	ctx = context.WithValue(ctx, "code", srcFile)

	// srcFile.Line().Add(appServeJsonRPC(info))
	// srcFile.Add(jsonRpcHandler(info))
	srcFile.Line().Add(jsonRpcServerHandler(info))

	filePath := path.Join(info.OutputFilePath, "transport", "server")

	if err = os.MkdirAll(filePath, os.ModePerm); err != nil {
		return
	}
	return srcFile.Save(path.Join(filePath, "jsonRPC.go"))
}

func jsonRpcHandler(info *meta.GenerationInfo) Code {

	return Func().Id("newJsonRpcHandler").ParamsFunc(func(g *Group) {

		for _, iface := range info.Services {

			service := utils.ToLowerCamel(iface.Name)

			transportPackagePath = path.Join(info.OutputPackageImport, "transport", service)

			g.Id(service+"Endpoints").Qual(transportPackagePath, endpointsSetName)
		}
		g.Id("opts").Op("...").Qual(packagePathPackageJsonRPC, "ServerOption")

	}).Qual(packagePathHttp, "Handler").BlockFunc(func(g *Group) {

		g.Line()
		g.Id("mux").Op(":=").Qual(packageGorillaMux, "NewRouter").Call()
		g.Line()

		for _, iface := range info.Services {

			service := utils.ToLowerCamel(iface.Name)

			transportPackagePath = path.Join(info.OutputPackageImport, "transport", service)

			g.Id("mux").Op(".").Id("Methods").Call(Id("\"POST\"")).Op(".").Id("Path").
				Call(Id(fmt.Sprintf("\"/v1/%s/{method}\"", service))).Op(".").Id("Handler").
				Call(
					Id("jsonRpcServerHandler").Call(
						Id(service+"Endpoints"),
						Id("opts").Op("..."),
					),
				)
		}
		g.Return(Id("accessControl").Call(Id("mux")))
	})
}

func jsonRpcServerHandler(info *meta.GenerationInfo) Code {

	return Line().Func().Id("jsonRpcServerHandler").ParamsFunc(func(p *Group) {
		p.Id("endpointMap").Qual(packagePathPackageJsonRPC, "EndpointCodecMap")
		p.Id("opts").Op("...").Qual(packagePathPackageJsonRPC, "ServerOption")

	}).Params(
		Qual(packagePathHttp, "Handler"),
	).BlockFunc(
		func(group *Group) {

			group.Line()

			group.Id("before").Op(":=").Qual(packagePathPackageJsonRPC, "ServerBefore").Call(
				Func().Params(Id(_ctx_).Qual(packagePathContext, "Context"), Id("r").Op("*").Qual(packagePathHttp, "Request")).Qual(packagePathContext, "Context").BlockFunc(func(g *Group) {

					g.Line()
					g.Id(_ctx_).Op("=").Qual(packagePathPackageUtils, "HttpToContext").Call(Id(_ctx_), Id("r"))
					g.Line()

					g.Id("span").Op(":=").Qual(packageTrace, "SpanFromHttp").Call(Qual(packagePathFmt, "Sprintf").Call(Lit("http:%s"), Id("r").Dot("URL").Dot("Path")), Id("r"))
					g.Id("span").Dot("SetTag").Call(Lit("requestPath"), Id("r").Dot("URL").Dot("Path"))
					g.Id(_ctx_).Op("=").Qual(packageOpentracing, "ContextWithSpan").Call(Id(_ctx_), Id("span"))
					g.Line()

					g.Return(Id(_ctx_))
				}),
			)

			group.Line()

			group.Id("after").Op(":=").Qual(packagePathPackageJsonRPC, "ServerAfter").Call(
				Func().Params(Id(_ctx_).Qual(packagePathContext, "Context"), Id("w").Qual(packagePathHttp, "ResponseWriter")).Qual(packagePathContext, "Context").BlockFunc(func(g *Group) {

					g.Line()
					g.If(Id("span").Op(":=").Qual(packageOpentracing, "SpanFromContext").Call(Id(_ctx_)).Op(";").Id("span").Op("!=").Nil()).Block(
						Id("span").Dot("SetTag").Call(Lit("responseCode"), Qual(packagePathHttp, "StatusOK")),
						Id("span").Dot("Finish").Call(),
					)

					g.Return(Id(_ctx_))
				}),
			)

			group.Line()

			group.Id("errorEncoder").Op(":=").Qual(packagePathPackageJsonRPC, "ServerErrorEncoder").Call(
				Func().Params(Id(_ctx_).Qual(packagePathContext, "Context"), Id("err").Error(), Id("w").Qual(packagePathHttp, "ResponseWriter")).BlockFunc(func(g *Group) {

					g.Line()
					g.Qual(packagePathPackageJsonRPC, "DefaultErrorEncoder").Call(Id(_ctx_), Id("err"), Id("w"))
					g.Id("span").Op(":=").Qual(packageOpentracing, "SpanFromContext").Call(Id(_ctx_))
					g.If(Id("span").Op("==").Nil()).Block(Return())

					g.Line()
					g.Id("span").Dot("SetTag").Call(Lit("err"), Id("err").Dot("Error").Call())
					g.Id("responseCode").Op(":=").Qual(packagePathHttp, "StatusInternalServerError")
					g.If(List(Id("sc"), Id("ok")).Op(":=").Id("err").Assert(Qual(packagePathPackageJsonRPC, "ErrorCoder")).Op(";").Id("ok")).Block(
						Id("responseCode").Op("=").Id("sc").Dot("ErrorCode").Call(),
					)
					g.Id("span").Dot("SetTag").Call(Lit("responseCode"), Id("responseCode"))

					g.Line()
					g.Id("span").Dot("Finish").Call()
				}),
			)

			group.Line()

			group.Id("opts").Op("=").Id("append").Call(
				Id("opts"),
				Line().Func().Params(Id("s").Op("*").Qual(packagePathPackageJsonRPC, "Server")).Block(
					Id("before").Call(Id("s")),
				),
				Func().Params(Id("s").Op("*").Qual(packagePathPackageJsonRPC, "Server")).Block(
					Id("after").Call(Id("s")),
				),
				Func().Params(Id("s").Op("*").Qual(packagePathPackageJsonRPC, "Server")).Block(
					Id("errorEncoder").Call(Id("s")),
				),
			)

			group.Line().Id("handler").Op(":=").Qual(packagePathPackageJsonRPC, "NewServer").Call(
				Id("endpointMap").Op(",").Id("opts").Op("..."))

			group.Return(Id("handler"))
		})
}
