package server

import (
	"context"
	"os"
	"path"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/vetcher/go-astra/types"

	"github.com/seniorGolang/i2s/pkg/tags"
	"github.com/seniorGolang/i2s/pkg/utils"
)

var transportPackagePath string

func renderServerApplication(info *GenerationInfo) (err error) {

	srcFile := NewFileProxy("server")

	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	ctx := prepareContext(info)
	ctx = context.WithValue(ctx, "code", srcFile)

	srcFile.Anon("net/http/pprof")

	srcFile.ImportName("log", "log")
	srcFile.ImportName(packagePPROF, "pprof")
	srcFile.ImportName(packageTypes, "types")
	srcFile.ImportName("io/ioutil", "ioutil")
	srcFile.ImportName(packageKitServer, "server")
	srcFile.ImportName(packageFastHttp, "fasthttp")
	srcFile.ImportName("runtime/debug", "debug")
	srcFile.ImportName(packagePathPackageUtils, "utils")
	srcFile.ImportName(info.SourcePackageImport, serviceAlias)

	for _, iface := range info.services {
		service := strings.ToLower(iface.Name)
		transportPackagePath = path.Join(info.BasePackageImport, "transport", service)
		srcFile.ImportName(transportPackagePath, service)
	}

	srcFile.Add(appLog())
	srcFile.Line()
	srcFile.Add(appConfigType(info))
	srcFile.Line()
	srcFile.Add(appType(info))
	srcFile.Line().Add(appNew(info))
	srcFile.Line().Add(appServePPROF(info))
	srcFile.Line().Add(appShutdown())

	for _, iface := range info.services {
		srcFile.Line().Add(Endpoints(iface, info))
	}

	filePath := path.Join(info.OutputFilePath, "transport", "server")

	if err = os.MkdirAll(filePath, os.ModePerm); err != nil {
		return
	}
	return srcFile.Save(path.Join(filePath, "application.go"))
}

func appLog() (code *Statement) {
	return Var().Id("log").Op("=").Qual(packagePathKitLog, "Log").Dot("WithField").Params(Lit("module"), Lit("server"))
}

func appConfigType(info *GenerationInfo) (code *Statement) {

	return Type().Id("appConfig").InterfaceFunc(func(g *Group) {

		g.Id("GitSHA").Call().Id("string")
		g.Id("Version").Call().Id("string")
		g.Id("NodeName").Call().Id("string")
		g.Id("BuildStamp").Call().Id("string")
		g.Id("BuildNumber").Call().Id("string")
		g.Id("ServiceName").Call().Id("string")

		g.Line()

		g.Id("BindAddr").Call().Id("string")
		g.Id("MetricsAddr").Call().Id("string")
		g.Id("EnablePPROF").Call().Id("bool")
		g.Id("BindPPROF").Call().Id("string")

	})
}

func appType(info *GenerationInfo) (code *Statement) {

	return Type().Id("appServer").StructFunc(func(g *Group) {

		for _, iface := range info.services {

			if !tags.ParseTags(iface.Docs).Contains("server") {
				continue
			}

			service := utils.ToLowerCamel(iface.Name)
			transportPackagePath = path.Join(info.BasePackageImport, "transport", strings.ToLower(iface.Name))
			g.Id(service+"Endpoints").Qual(transportPackagePath, endpointsSetName)
		}

		g.Id("srvHttp").Op("*").Qual(packageFastHttp, "Server")
		g.Id("srvPPROF").Op("*").Qual(packageFastHttp, "Server")
		g.Id("srvMetrics").Op("*").Qual(packageFastHttp, "Server")
		g.Id("reporterCloser").Qual(packageIO, "Closer")
		g.Line()
		g.Id("config").Id("appConfig")
	})
}

func appNew(info *GenerationInfo) (code *Statement) {

	return Func().Id("New").ParamsFunc(func(g *Group) {

		g.Id("config").Id("appConfig")

		for _, iface := range info.services {

			if !tags.ParseTags(iface.Docs).Contains("server") {
				continue
			}

			service := iface.Name
			g.Id("svc"+utils.ToCamel(service)).Qual(info.SourcePackageImport, service)
		}

	}).Params(Id("app").Op("*").Id("appServer")).BlockFunc(func(g *Group) {

		g.Line()
		g.Id("app").Op("=").Op("&").Id("appServer").ValuesFunc(func(g *Group) {

			g.Add(DictFunc(func(d Dict) {
				d[Id("config")] = Id("config")
			}))
		})

		g.Line()

		g.Id("tags").Op(":=").Op("[]").Qual(packageTypes, "KeyValue").Values(
			Line().Qual(packageTypes, "KV").Call(Lit("gitSHA"), Id("app").Dot("config").Dot("GitSHA").Call()),
			Line().Qual(packageTypes, "KV").Call(Lit("version"), Id("app").Dot("config").Dot("Version").Call()),
			Line().Qual(packageTypes, "KV").Call(Lit("nodeName"), Id("app").Dot("config").Dot("NodeName").Call()),
			Line().Qual(packageTypes, "KV").Call(Lit("backend"), Id("app").Dot("config").Dot("ServiceName").Call()),
			Line().Qual(packageTypes, "KV").Call(Lit("buildStamp"), Id("app").Dot("config").Dot("BuildStamp").Call()),
			Line().Qual(packageTypes, "KV").Call(Lit("buildNumber"), Id("app").Dot("config").Dot("BuildNumber").Call()).Op(",").Line(),
		)
		g.Line()

		for _, iface := range info.services {

			if !tags.ParseTags(iface.Docs).Contains("server") {
				continue
			}

			service := utils.ToLowerCamel(iface.Name)
			transportPackagePath = path.Join(info.BasePackageImport, "transport", strings.ToLower(iface.Name))
			g.Id("app").Op(".").Id(service+"Endpoints").Op("=").Qual(transportPackagePath, "ServerEndpoints").Call(Id("svc"+utils.ToCamel(service)), Id("tags").Op("..."))
		}
		g.Return()
	})
}

func appServeJsonRPC(info *GenerationInfo) (code *Statement) {

	return Func().Params(Id("app").Op("*").Id("appServer")).Id("ServeJsonRPC").Params().Block(
		Id("app").Op(".").Id("srvHttp").Op("=").Qual(packageKitServer, "StartFastHttpServer").Call(

			Id("newJsonRpcHandler").CallFunc(func(g *Group) {

				for _, iface := range info.services {
					service := utils.ToLowerCamel(iface.Name)
					g.Id("app").Op(".").Id(service + "Endpoints")
				}

			}), Id("app").Op(".").Id("config").Op(".").Id("BindAddr").Call()),
		Return(),
	)
}

func appServeMetrics(info *GenerationInfo) (code *Statement) {

	return Func().Params(Id("app").Op("*").Id("appServer")).Id("ServeMetrics").Params().Block(
		Id("app").Op(".").Id("srvMetrics").Op("=").Qual(packageKitServer, "StartFastHttpServer").Call(

			Id("newMetricsHandler").Call(), Id("app").Op(".").Id("config").Op(".").Id("MetricsAddr").Call()),
		Return(),
	)
}

func appServePPROF(info *GenerationInfo) (code *Statement) {

	return Func().Params(Id("app").Op("*").Id("appServer")).Id("ServePPROF").Params().Block(

		Go().Func().Params().BlockFunc(func(g *Group) {

			g.If(Id("app").Op(".").Id("config").Op(".").Id("EnablePPROF").Call()).BlockFunc(func(ifGroup *Group) {

				ifGroup.Line()
				ifGroup.Qual("runtime", "SetBlockProfileRate").Call(Lit(1))
				ifGroup.Qual("runtime", "SetMutexProfileFraction").Call(Lit(5))
				ifGroup.Qual("runtime/debug", "SetMaxThreads").Call(Lit(40000))
				ifGroup.Line()

				ifGroup.Id("app").Op(".").Id("srvPPROF").Op("=").Qual(packageKitServer, "StartFastHttpServer").Call(
					Qual(packagePathHttp, "DefaultServeMux"),
					Id("app").Op(".").Id("config").Op(".").Id("BindPPROF").Call(),
				)
			})

		}).Call(),
		Return(),
	)
}

func appShutdown() (code *Statement) {

	return Func().Params(Id("app").Op("*").Id("appServer")).Id("Shutdown").Params().BlockFunc(func(g *Group) {

		g.Line()
		g.If(Id("app").Op(".").Id("srvHttp").Op("!=").Id("nil")).Block(
			Qual(packageKitServer, "ShutdownFastHttpServer").Call(Id("app").Op(".").Id("srvHttp")),
		)
		g.Line()
		g.If(Id("app").Op(".").Id("srvMetrics").Op("!=").Id("nil")).Block(
			Qual(packageKitServer, "ShutdownFastHttpServer").Call(Id("app").Op(".").Id("srvMetrics")),
		)
		g.Line()
		g.If(Id("app").Op(".").Id("srvPPROF").Op("!=").Id("nil")).Block(
			Qual(packageKitServer, "ShutdownFastHttpServer").Call(Id("app").Op(".").Id("srvPPROF")),
		)
	})
}

func Endpoints(iface types.Interface, info *GenerationInfo) Code {

	service := utils.ToLowerCamel(iface.Name)
	transportPackagePath = path.Join(info.BasePackageImport, "transport", strings.ToLower(iface.Name))

	return Func().Params(Id("app").Op("*").Id("appServer")).
		Id(utils.ToCamel(iface.Name) + "EndpointsSet").Params().Params(Op("*").Qual(transportPackagePath, endpointsSetName)).Block(
		Return(Op("&").Id("app").Dot(service + "Endpoints")),
	)
}
