package server

import (
	"context"
	"os"
	"path"

	. "github.com/dave/jennifer/jen"
)

func renderServerMetrics(info *GenerationInfo) (err error) {

	srcFile := NewFileProxy("metrics")

	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	ctx := prepareContext(info)
	ctx = context.WithValue(ctx, "code", srcFile)

	srcFile.ImportAlias(packageKitPrometheus, "kitPrometheus")
	srcFile.ImportAlias(packageStdPrometheus, "stdPrometheus")

	srcFile.ImportName(packagePathGoKitEndpoint, "endpoint")
	srcFile.ImportName(packagePathGoKitMetrics, "metrics")
	srcFile.ImportName(info.SourcePackageImport, "service")

	srcFile.Add(prometheusCounterRequestCount(info)).Line()

	srcFile.Add(prometheusCounterRequestCountAll(info)).Line()

	srcFile.Add(prometheusSummaryRequestCount(info)).Line()

	srcFile.Add(serverMetrics(info))

	filePath := path.Join(info.OutputFilePath, "transport", "metrics")

	if err = os.MkdirAll(filePath, os.ModePerm); err != nil {
		return
	}
	return srcFile.Save(path.Join(filePath, "metrics.go"))
}

func prometheusCounterRequestCount(info *GenerationInfo) (code *Statement) {

	return Var().Id("RequestCount").Op("=").Qual(packageKitPrometheus, "NewCounterFrom").Call(Qual(packageStdPrometheus, "CounterOpts").Values(
		DictFunc(func(d Dict) {
			d[Id("Name")] = Lit("count")
			d[Id("Namespace")] = Lit("service")
			d[Id("Subsystem")] = Lit("requests")
			d[Id("Help")] = Lit("Number of requests received")
		}),
	), Index().String().Values(Lit("method"), Lit("service"), Lit("success")))
}

func prometheusCounterRequestCountAll(info *GenerationInfo) (code *Statement) {

	return Var().Id("RequestCountAll").Op("=").Qual(packageKitPrometheus, "NewCounterFrom").Call(Qual(packageStdPrometheus, "CounterOpts").Values(
		DictFunc(func(d Dict) {
			d[Id("Name")] = Lit("all_count")
			d[Id("Namespace")] = Lit("service")
			d[Id("Subsystem")] = Lit("requests")
			d[Id("Help")] = Lit("Number of all requests received")
		}),
	), Index().String().Values(Lit("method"), Lit("service")))
}

func prometheusSummaryRequestCount(info *GenerationInfo) (code *Statement) {

	return Var().Id("RequestLatency").Op("=").Qual(packageKitPrometheus, "NewSummaryFrom").Call(Qual(packageStdPrometheus, "SummaryOpts").Values(
		DictFunc(func(d Dict) {
			d[Id("Name")] = Lit("latency_microseconds")
			d[Id("Namespace")] = Lit("service")
			d[Id("Subsystem")] = Lit("requests")
			d[Id("Help")] = Lit("Total duration of requests in microseconds")
		}),
	), Index().String().Values(Lit("method"), Lit("service"), Lit("success")))
}

func serverMetrics(info *GenerationInfo) *Statement {

	s := &Statement{}

	const _methodName_ = "methodName"
	const _serviceName_ = "serviceName"

	s.Line().Func().Id("LatencyMiddleware").Params(Id("dur").Qual(packagePathGoKitMetrics, "Histogram"), Id(_methodName_).Op(",").Id(_serviceName_).String()).Qual(packagePathGoKitEndpoint, "Middleware").Block(
		Return().Func().Params(Id("next").Qual(packagePathGoKitEndpoint, "Endpoint")).Qual(packagePathGoKitEndpoint, "Endpoint").Block(
			Id("dur").Op(":=").Id("dur").Dot("With").Call(Lit("method"), Id(_methodName_), Lit("service"), Id(_serviceName_)),
			Return().Func().Params(ctx_contextContext, Id("request").Interface()).Params(Id("response").Interface(), Err().Error()).Block(
				Defer().Func().Params(Id("begin").Qual(packagePathTime, "Time")).Block(
					Id("dur").Dot("With").Call(Lit("success"), Qual(packagePathFmt, "Sprint").Call(Err().Op("==").Nil())).
						Dot("Observe").Call(Qual(packagePathTime, "Since").Call(Id("begin")).Dot("Seconds").Call()),
				).Call(Qual(packagePathTime, "Now").Call()),
				Return().Id("next").Call(Id(_ctx_), Id("request")),
			),
		),
	)
	s.Line()
	s.Line().Func().Id("RequestFrequencyMiddleware").Params(Id("freq").Op(",").Id("freqAll").Qual(packagePathGoKitMetrics, "Counter"), Id(_methodName_).Op(",").Id(_serviceName_).String()).Qual(packagePathGoKitEndpoint, "Middleware").Block(
		Return().Func().Params(Id("next").Qual(packagePathGoKitEndpoint, "Endpoint")).Qual(packagePathGoKitEndpoint, "Endpoint").Block(
			Id("freq").Op(":=").Id("freq").Dot("With").Call(Lit("method"), Id(_methodName_), Lit("service"), Id(_serviceName_)),
			Id("freqAll").Op(":=").Id("freqAll").Dot("With").Call(Lit("method"), Id(_methodName_), Lit("service"), Id(_serviceName_)),
			Return().Func().Params(ctx_contextContext, Id("request").Interface()).Params(Interface(), Error()).Block(
				Defer().Id("freq").Dot("Add").Call(Lit(1)),
				Id("freqAll").Dot("Add").Call(Lit(1)),
				Return(Id("next").Call(Id(_ctx_), Id("request"))),
			),
		),
	)
	return s
}
