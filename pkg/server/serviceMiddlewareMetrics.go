package server

import (
	"context"
	"path"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/vetcher/go-astra/types"

	"github.com/seniorGolang/i2s/pkg/utils"
)

var serviceLoggingMiddlewareName = utils.ToCamel(serviceLoggingStructName)

func renderServiceMiddlewareLogging(info *GenerationInfo) (err error) {

	srcFile := NewFileProxy(info.PkgName)

	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	ctx := prepareContext(info)
	ctx = context.WithValue(ctx, "code", srcFile)

	pkgMetrics = path.Join(info.BasePackageImport, "transport", "metrics")

	srcFile.ImportName(pkgMetrics, "metrics")
	srcFile.ImportName(packagePathKitLog, "log")
	srcFile.ImportName(info.SourcePackageImport, serviceAlias)
	srcFile.ImportAlias(packagePathGoKitMetrics, "kitMetrics")

	srcFile.Line().Add(metricMiddleware(info))
	srcFile.Line().Add(metricMiddlewareType(info))

	for _, signature := range info.Iface.Methods {
		srcFile.Line()
		srcFile.Add(metricFunc(ctx, signature, info)).Line()
	}

	return srcFile.Save(path.Join(info.OutputFilePath, "transport", strings.ToLower(info.ServiceName), "metrics.go"))
}

func metricMiddlewareType(info *GenerationInfo) Code {
	return Type().Id(serviceMetricsStructName).Struct(
		Id(_next_).Qual(info.SourcePackageImport, info.Iface.Name),
		Id("requestCount").Qual(packagePathGoKitMetrics, "Counter"),
		Id("requestCountAll").Qual(packagePathGoKitMetrics, "Counter"),
		Id("requestLatency").Qual(packagePathGoKitMetrics, "Histogram"),
	)
}

func metricMiddleware(info *GenerationInfo) Code {
	return Func().Id(serviceMetricsMiddlewareName).Params(Id("next").Qual(info.SourcePackageImport, info.Iface.Name)).Params(Qual(info.SourcePackageImport, info.Iface.Name)).
		BlockFunc(func(g *Group) {
			g.Return(Op("&").Id(serviceMetricsStructName).Values(
				Dict{
					Id(_next_):            Id(_next_),
					Id("requestCount"):    Qual(pkgMetrics, "RequestCount").Op(".").Id("With").Call(Lit("service"), Lit(info.ServiceName)),
					Id("requestCountAll"): Qual(pkgMetrics, "RequestCountAll").Op(".").Id("With").Call(Lit("service"), Lit(info.ServiceName)),
					Id("requestLatency"):  Qual(pkgMetrics, "RequestLatency").Op(".").Id("With").Call(Lit("service"), Lit(info.ServiceName)),
				},
			))
		})
}

func metricFunc(ctx context.Context, signature *types.Function, info *GenerationInfo) *Statement {
	return methodDefinition(ctx, serviceMetricsStructName, signature).BlockFunc(metricFuncBody(signature, info))
}

func metricFuncBody(signature *types.Function, info *GenerationInfo) func(g *Group) {

	return func(g *Group) {

		g.Line().Defer().Func().Params(Id("begin").Qual(packagePathTime, "Time")).Block(
			Id(serviceMetricsStructName).Dot("requestLatency").Dot("With").Call(
				Lit("method"), Lit(utils.ToLowerCamel(signature.Name)),
				Lit("success"), Qual(packagePathFmt, "Sprint").Call(Err().Op("==").Nil())).
				Dot("Observe").Call(Qual(packagePathTime, "Since").Call(Id("begin")).Dot("Seconds").Call()),
		).Call(Qual(packagePathTime, "Now").Call())

		g.Line().Defer().Id(serviceMetricsStructName).Dot("requestCount").Dot("With").Call(
			Lit("method"), Lit(utils.ToLowerCamel(signature.Name)),
			Lit("success"), Qual(packagePathFmt, "Sprint").Call(Err().Op("==").Nil())).
			Dot("Add").Call(Lit(1))

		g.Line().Id(serviceMetricsStructName).Dot("requestCountAll").Dot("With").Call(
			Lit("method"), Lit(utils.ToLowerCamel(signature.Name))).
			Dot("Add").Call(Lit(1))

		g.Line().Return().Id(serviceMetricsStructName).Dot(_next_).Dot(signature.Name).Call(paramNames(signature.Args))
	}
}
