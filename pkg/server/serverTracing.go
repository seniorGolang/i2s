package server

import (
	"context"
	"os"
	"path"
	"strings"

	. "github.com/dave/jennifer/jen"

	"github.com/seniorGolang/i2s/pkg/meta"
)

func renderServerTracing(info *meta.GenerationInfo) (err error) {

	srcFile := NewFileProxy("server")

	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	ctx := prepareContext(info)
	ctx = context.WithValue(ctx, "code", srcFile)

	transportPackagePath = path.Join(info.OutputPackageImport, "transport", strings.ToLower(info.ServiceName))

	srcFile.ImportName(packageZipkinHttp, "http")
	srcFile.ImportName(packageOpenZipkin, "zipkin")
	srcFile.ImportAlias(packageJaegerlog, "jaegerLog")
	srcFile.ImportName(packageJaegerConfig, "config")
	srcFile.ImportName(packageJaegerClient, "jaeger")
	srcFile.ImportName(packageJaegerMetrics, "metrics")
	srcFile.ImportName(packagePathPackageUtils, "utils")
	srcFile.ImportName(packageOpentracing, "opentracing")
	srcFile.ImportAlias(packageOpenZipkinOpenTracing, "zipkinTracer")

	srcFile.Add(withZipkin())
	srcFile.Line()
	srcFile.Add(withJaeger())

	filePath := path.Join(info.OutputFilePath, "transport", "server")

	if err = os.MkdirAll(filePath, os.ModePerm); err != nil {
		return
	}
	return srcFile.Save(path.Join(filePath, "tracer.go"))
}

func withJaeger() Code {

	return Func().Params(Id("app").Op("*").Id("appServer")).Id("WithJaeger").Params().Params(Op("*").Id("appServer")).BlockFunc(func(g *Group) {

		g.Line()

		g.List(Id("environment"), Id("_")).Op(":=").Qual(packageOS, "LookupEnv").Call(Lit("ENV"))

		g.Line()

		g.List(Id("cfg"), Err()).Op(":=").Qual(packageJaegerConfig, "FromEnv").Call()
		g.Qual(packagePathPackageUtils, "ExitOnError").Call(Id("log"), Err(), Lit("jaeger config err"))

		g.Line()

		g.If(Id("cfg").Dot("ServiceName").Op("==").Lit("")).Block(
			Id("cfg").Dot("ServiceName").Op("=").Id("environment").Op("+").Id("app").Dot("config").Dot("ServiceName").Call(),
		)

		g.Line()

		g.Var().Id("trace").Qual(packageOpentracing, "Tracer")
		g.List(Id("trace"), Id("app").Dot("reporterCloser"), Err()).Op("=").Id("cfg").Dot("NewTracer").Call(
			Qual(packageJaegerConfig, "Logger").Call(Qual(packageJaegerlog, "NullLogger")),
			Qual(packageJaegerConfig, "Metrics").Call(Qual(packageJaegerMetrics, "NullFactory")),
		)

		g.Line()

		g.Qual(packagePathPackageUtils, "ExitOnError").Call(Id("log"), Err(), Lit("could not create jaeger tracer"))

		g.Line()

		g.Qual(packageOpentracing, "SetGlobalTracer").Call(Id("trace"))
		g.Return(Id("app"))
	})
}

func withZipkin() Code {
	return Func().Params(Id("app").Op("*").Id("appServer")).Id("WithZipkin").Params(Id("zipkinUrl").String()).Params(Op("*").Id("appServer")).BlockFunc(func(g *Group) {

		g.Line()

		g.Id("reporter").Op(":=").Qual(packageZipkinHttp, "NewReporter").Call(Id("zipkinUrl"))
		g.Id("app").Dot("reporterCloser").Op("=").Id("reporter")

		g.Line()

		g.Id("name").Op(":=").Id("app").Dot("config").Dot("ServiceName").Call()

		g.Line()

		g.List(Id("environment"), Id("envExists")).Op(":=").Qual(packageOS, "LookupEnv").Call(Lit("ENV"))

		g.Line()

		g.If(Id("envExists")).Block(Id("name").Op("=").Id("environment").Op("+").Id("name"))

		g.Line()

		g.List(Id("endpoint"), Err()).Op(":=").Qual(packageOpenZipkin, "NewEndpoint").Call(Id("name"), Lit(""))
		g.Qual(packagePathPackageUtils, "ExitOnError").Call(Id("log"), Err(), Lit("could not create endpoint"))

		g.Line()

		g.List(Id("nativeTracer"), Err()).Op(":=").Qual(packageOpenZipkin, "NewTracer").Call(Id("reporter"), Qual(packageOpenZipkin, "WithLocalEndpoint").Call(Id("endpoint")))
		g.Qual(packagePathPackageUtils, "ExitOnError").Call(Id("log"), Err(), Lit("could not create tracer"))

		g.Line()

		g.Id("trace").Op(":=").Qual(packageOpenZipkinOpenTracing, "Wrap").Call(Id("nativeTracer"))
		g.Qual(packageOpentracing, "SetGlobalTracer").Call(Id("trace"))

		g.Line()

		g.Return(Id("app"))
	})
}
