package server

import (
	"context"
	"path"
	"strings"

	. "github.com/dave/jennifer/jen"
)

func renderServiceTracing(info *GenerationInfo) (err error) {

	srcFile := NewFileProxy(info.PkgName)

	ctx := prepareContext(info)
	ctx = context.WithValue(ctx, "code", srcFile)

	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	srcFile.ImportAlias(packageKitPrometheus, "kitPrometheus")
	srcFile.ImportAlias(packageStdPrometheus, "stdPrometheus")

	srcFile.ImportName(packageTrace, "trace")
	srcFile.ImportName(packageTypes, "types")
	srcFile.ImportName(packagePathGoKitMetrics, "metrics")
	srcFile.ImportName(info.SourcePackageImport, "service")
	srcFile.ImportName(packagePathGoKitEndpoint, "endpoint")

	srcFile.Add(clientTracingMiddleware(info)).Line()

	return srcFile.Save(path.Join(info.OutputFilePath, "transport", strings.ToLower(info.ServiceName), "tracing.go"))
}

func clientTracingMiddleware(info *GenerationInfo) *Statement {

	s := &Statement{}
	s.Func().Id("InstrumentingEndpoints").Call(
		Id("endpoints").Id(endpointsSetName),
		Id("tags").Op("...").Qual(packageTypes, "KeyValue"),
	).Id(endpointsSetName).BlockFunc(func(g *Group) {
		g.Return(Id(endpointsSetName).Values(DictFunc(func(d Dict) {
			for _, signature := range info.Iface.Methods {
				d[Id(endpointsStructFieldName(signature.Name))] = Qual(packageTrace, "TraceEndpoint").Call(Id("tags").Op("...")).Call(Id("endpoints").Dot(endpointsStructFieldName(signature.Name)))
			}
		})))
	})
	return s
}
