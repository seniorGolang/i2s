package client

import (
	"context"
	"path"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/vetcher/go-astra/types"

	"github.com/seniorGolang/i2s/pkg/meta"
	"github.com/seniorGolang/i2s/pkg/utils"
)

func renderClientJsonRPC(info *meta.GenerationInfo) (err error) {

	srcFile := NewFile(strings.ToLower(info.ServiceName))
	srcFile.PackageComment("GENERATED BY i2s. DO NOT EDIT.")

	ctx, _ := prepareContext(info.SourceFilePath, info.Iface)
	ctx = context.WithValue(ctx, "code", srcFile)

	srcFile.ImportName(packagePathJsonRPC, "jsonrpc")
	srcFile.ImportName(packagePathURL, "url")
	srcFile.ImportName(packagePathUtils, "utils")
	srcFile.ImportName(packagePathTrace, "trace")
	srcFile.ImportName(info.SourcePackageImport, "service")

	srcFile.Line()

	srcFile.Func().Id("NewClientJsonRPC").
		Params(Id(_trgurl_).String(), Id("opts").Op("...").Qual(packagePathJsonRPC, "ClientOption")).Op("(").
		Id("client").Qual(info.SourcePackageImport, info.Iface.Name).Op(")").
		BlockFunc(func(g *Group) {
			g.Line()
			g.Return(clientBodyHTTP(info))
		})

	for _, signature := range info.Iface.Methods {
		srcFile.Line().Add(decodeResponseJsonRpc(ctx, signature))
	}

	return srcFile.Save(path.Join(info.OutputFilePath, strings.ToLower(info.ServiceName), "jsonrpc.go"))
}

func clientBodyHTTP(info *meta.GenerationInfo) (code *Statement) {

	return Id(endpointsSetName).Values(DictFunc(func(d Dict) {

		for _, signature := range info.Iface.Methods {
			d[Id(endpointsStructFieldName(signature.Name))] = Qual(packagePathJsonRPC, "NewClient").Call(
				Line().Op(_trgurl_),
				Line().Lit(utils.ToLowerCamel(signature.Name)),
				Line().Append(Id("opts"), Qual(packagePathJsonRPC, "ClientResponseDecoder").Call(Id(decodeMethoJsonRpcName(signature.Name)).Call())).Op("..."),
				Line(),
			).Op(".").Id("Endpoint").Call()
		}
	}))
}

func decodeResponseJsonRpc(ctx context.Context, fn *types.Function) (code *Statement) {

	respName := "resp"
	jsonRPCName := "jsonRPC"

	results := removeErrorIfLast(fn.Results)

	return Func().Id(decodeMethoJsonRpcName(fn.Name)).Params().Params(
		Id("fn").Qual(packagePathJsonRPC, "DecodeResponseFunc"),
	).BlockFunc(func(group *Group) {
		group.Line().Return().Func().Params(
			Id(_ctx_).Qual(packagePathContext, "Context"),
			Id(jsonRPCName).Qual(packagePathJsonRPC, "Response"),
		).Params(
			Id("response").Interface(),
			Id("err").Error(),
		).BlockFunc(func(group *Group) {

			if len(results) > 0 {
				group.Line().Var().Id(respName).Id(responseStructName(fn))
				group.Err().Op("=").Qual(packagePathJson, "Unmarshal").Call(Id(jsonRPCName).Op(".").Id("Result"), Op("&").Id(respName))
				group.Return(Id(respName), Err())
			} else {
				group.Return()
			}
		})
	})
}
